call plug#begin('~/.vim/plugged')
    " 主题
	Plug 'dracula/vim',{'as': 'dracula'}
    Plug 'morhetz/gruvbox'
    Plug 'EdenEast/nightfox.nvim'
    " 补全
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " 注释
    Plug 'tpope/vim-commentary'
    " 状态栏
    Plug 'itchyny/lightline.vim'
    " 格式化
    Plug 'godlygeek/tabular'
    " 目录树
    Plug 'preservim/nerdtree'
    " 括号补全
    Plug 'jiangmiao/auto-pairs'
    " 图标
    Plug 'ryanoasis/vim-devicons'
    " 目录树语法高亮
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    " f键智能跳转
    Plug 'rhysd/clever-f.vim'
    " 翻译
    Plug 'voldikss/vim-translator'
    " Plug 'yianwillis/vimcdoc'
call plug#end()

" 打开文件时回到上次离开时光标的位置
augroup myaugrp
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | endif
augroup end

" 主题配色
set background=dark
colorscheme gruvbox

syntax enable " 打开语法高亮
filetype on   " 文件类型检测
filetype indent on
filetype plugin on


set number " 显示行号
set mouse=a " 启用鼠标
set wildmenu
set wildoptions=pum
set laststatus=2
set noshowmode
set autoindent
set smartindent
set smartcase
set hlsearch
set incsearch
set scrolloff=8
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartcase
set smartindent
set encoding=utf-8
set showcmd
set nobackup
set noswapfile
set nowrap
set nowritebackup
set updatetime=300
set signcolumn=yes

" leader键为空格
let g:mapleader=" "

" 插入模式下连续jk回到normal模式
inoremap jk <esc>

noremap ; :
nnoremap q :q<cr>
nnoremap n nzz
nnoremap N Nzz
nnoremap <leader>w :w<cr>
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" normal模式下使用leader键加回车键取消高亮
nnoremap <leader><cr> :nohl<cr> 
nnoremap <bs> viwc
nnoremap <c-j> <c-w>j
nnoremap <c-h> <c-w>h
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l


nnoremap <silent> <leader>\| :Tab /\|<cr>
nnoremap <silent> <leader>= :Tab /=<cr>
nnoremap <silent> <leader>" :Tab /"<cr>



"""""""""""""""""""""""""
"""" auto-pairs 配置 """"
"""""""""""""""""""""""""
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<M-b>'

""""""""""""""""""""""""""""""
""""""""" nerdtree 配置 """"""
""""""""""""""""""""""""""""""
nnoremap <silent> <leader>e :NERDTreeMirror<cr>:NERDTreeToggle<cr>


""""""""""""""""""""""
"""""" coc 配置 """"""
""""""""""""""""""""""
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <leader>rn <Plug>(coc-rename)

xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

"""""""""""""""""""""""
"""""" nerdtree  """"""
"""""""""""""""""""""""
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

let g:NERDTreeDirArrowExpandable = ' '
let g:NERDTreeDirArrowCollapsible = ' '

"""""""""""""""""""""""""
""""""" clever-f  """""""
"""""""""""""""""""""""""
let g:clever_f_mark_direct = 1

""""""""""""""""""""""""""""""
""""""""" translator """""""""
""""""""""""""""""""""""""""""

let g:translator_target_lang = 'zh'
let g:translator_default_engines = ['youdao', 'haici']
let g:translator_history_enable = v:true
" Display translation in a window
nmap <silent> mm :TranslateW<cr>
vmap <silent> mm :TranslateW<cr>
